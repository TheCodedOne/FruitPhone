buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		classpath 'me.tatarka:gradle-retrolambda:3.2.0'
	}
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'net.minecrell.licenser' version '0.3'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'maven'

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)
ext.priv = parseConfig(file('private.properties'))

group = "com.elytradev"
archivesBaseName = "FruitPhone"
version = config.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

retrolambda {
	javaVersion JavaVersion.VERSION_1_6
	defaultMethods true
}

repositories {
	maven {
		name = 'sonatype-nexus'
		url = 'https://oss.sonatype.org/content/repositories/public/'
	}
	maven {
		name = 'unascribed'
		url = 'http://unascribed.com/maven/releases'
	}
	jcenter()
	ivy {
		artifactPattern "http://unascribed.com/jars/[organisation]/[module].[ext]"
	}
	maven {
		name = 'jei'
		url = "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = 'hwyla'
		url "http://tehnut.info/maven"
	}
}

configurations {
	deploy
}

jar {
	classifier = 'slim'
}

shadowJar {
	classifier = ''
	relocate 'io.github.elytra.concrete', 'com.elytradev.fruitphone.repackage.io.github.elytra.concrete'
	configurations = [project.configurations.shadow]
}

reobf {
	shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

artifacts {
	archives shadowJar
}

dependencies {
	deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
	
	compile project(':ProbeDataProviderAPI')
	
	shadow 'io.github.elytra:concrete:0.0.9'
	compile 'io.github.elytra:concrete:0.0.9'
	
	compile 'mezz.jei:jei_1.10.2:3.9.7.260:api'
	runtime 'mezz.jei:jei_1.10.2:3.9.7.260'
	
	compile 'mcp.mobius.waila:Hwyla:1.8.10-B24_1.10.2'
	runtime 'mcp.mobius.waila:Hwyla:1.8.10-B24_1.10.2'
}

minecraft {
	version = config.forge
	mappings = config.mappings

	runDir = "minecraft"

	replaceIn 'src/main/java/com/elytradev/fruitphone/FruitPhone.java'
	replace '@VERSION@', project.version
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '*.xcf'
		exclude '*.wav'
	}
}

def parseConfig(File config) {
	if (!config.exists()) return new Properties()
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}

if (file("private.properties").exists()) {
	uploadArchives {
		repositories.mavenDeployer {
			configuration = configurations.deploy
			pom.artifactId = 'fruitphone'
			repository(url: "sftp://"+priv.sftpHost+priv.sftpPath) {
				authentication(userName: priv.sftpUser, privateKey: file(priv.sftpKey))
			}
		}
	}
}
